# filling a numpy array with random values
import numpy as np

#printing an array of zeroes that has 3 rows and 4 columns
np.zeros((3,4))
# array([[0., 0., 0., 0.],
#        [0., 0., 0., 0.],
#        [0., 0., 0., 0.]])

#printing an array of 3 rows and 4 columns, and specifying the data type to be int
np.zeros((3,4), dtype=int)
# array([[0, 0, 0, 0],
#        [0, 0, 0, 0],
#        [0, 0, 0, 0]])

#filling an array elements with ones
np.ones((2,3))

#specifying the dtype to be int
np.ones((2, 3), dtype=int)
# array([[1, 1, 1],
#        [1, 1, 1]])

#specifying the dtype to be a boolean
np.ones((2,3), dtype=bool)
# array([[ True,  True,  True],
#        [ True,  True,  True]])

#filling the array with random values between 0.00 and 0.99
np.random.random((3,4))
# array([[0.92290904, 0.80108577, 0.02354898, 0.72012061],
#        [0.95695778, 0.17958177, 0.70744356, 0.01334323],
#        [0.24256016, 0.48105369, 0.04802303, 0.57579175]])

#generating random elements using randint and uniform:

#display random integers between 10-20; having 4 rows and 5 columns.
my_array= np.random.randint(10, 20, size=(4,5))

#fetching the number in the second row and third column in the array
my_array[1,2]

#exploring the numpy uniform function
#generating random float numbers between 10 and 50, and displaying the first 10 rows and 5 columns
np.random.uniform(10.0, 50.0, size=(10,5))

#creating a 3 dimensional array
#the "size" parameter determines the dimension of the created array
np.random.uniform(10.0, 50.0, size=(10,5,6))

#creating a 4 dimensional array
#the "size" parameter determines the dimension of the created array
np.random.uniform(10.0, 50.0, size=(10,5,6,5))

#setting a seed number for random number generation in numpy, ensuring reproducibility
#set the seed in order to generate the same numbers
# note: it does NOT matter what number you give the seed function, just as long as the value is not empty.
np.random.seed(10) 
np.random.random((3,4))

#creating sequences with arrange, reshaping arrays, and converting multi-dimensional arrays to 1D with flatten.
import numpy as np
#creating an array that starts at 2, ends at 10, and goes up by 3 for each number
np.arange(2, 10, 3)

#creating an array from numbers between 1-7
np.arange(7)

#how to reshape an array
#creating a 2 dimensional array. the first array goes from 0-9 and the second array from 10-19 
np.arange(20).reshape([2,10])

#creating a array with 4 rows, and 5 columns counting up to 19
np.arange(20).reshape([4, 5])

#creating a 2 dimensional array with 2 rows and 5 columns
np.arange(20).reshape([2, 2, 5])

#creating an array of 10 elements, and reshaping it to 2 rows and 5 columns
np.array([10, 2, 5, 7, 9, 15, 25, 30, 35, 40]).reshape([2, 5])

#creating an array with negative numbers 
#starting at -15, ending at 5, and going down by 4 for each number
np.arange(-15,5,4)

#reshaping an array even further to 10 rows and one column
np.array([10, 2, 5, 7, 9, 15, 25, 30, 35, 40]).reshape([2, 5]).reshape([10,1])

#using flatten to convert a multi-dimensional array to a 1D array by using flatten()
np.random.random((4,3,3)).flatten()
# array([0.00394827, 0.51219226, 0.81262096, 0.61252607, 0.72175532,
#        0.29187607, 0.91777412, 0.71457578, 0.54254437, 0.14217005,
#        0.37334076, 0.67413362, 0.44183317, 0.43401399, 0.61776698,
#        0.51313824, 0.65039718, 0.60103895, 0.8052232 , 0.52164715,
#        0.90864888, 0.31923609, 0.09045935, 0.30070006, 0.11398436,
#        0.82868133, 0.04689632, 0.62628715, 0.54758616, 0.819287  ,
#        0.19894754, 0.8568503 , 0.35165264, 0.75464769, 0.29596171,
#        0.88393648])

#determining the number of rows in the flattened array
np.random.random((4,3,3)).flatten().shape
# (36,)

