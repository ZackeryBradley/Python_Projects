#overall function help for python
'''this file is meant to represent a few methods in python and provide examples as to what they do'''

#finding your package directory:
import re
print(dir(re))

#getting a list and explanation of each function in your python package
import numpy
function_list = [name for name in dir(numpy) if callable(getattr(numpy, name))]
for function_name in function_list:
  print(function_name)
  help(getattr(numpy, function_name))
print()

#getting a list of functions and what each function is used for in your package (Version2)
import re
for name in dir(re):
  obj = getattr(re, name)
  if callable(obj):
    print(f"Function: {name}")
  help(obj)
  print()

#getting overall help for python
info = help()
print(info)

# listing current directories
import os
directories = os.listdir()
# directories.insert(0,'example') #this will create a directory named "example" and place it as the top of your directories list.
directories[4] #supplying a number here will give you the name of the directory in thr "4th" position
directories.index('.profile') #supplying a directory name here will give you the index number of where the directory file is in the list
directories

import re
pattern = r"zack"
replace = "??"
string = "My name is zack, name is zack"
result = re.fullmatch(pattern, string) #"fullmatch" will only display something if it is an EXACT match
result_2 = re.search(pattern,string) #this will show the index in which the data is found, and also display the character string we are looking for!
result_3 = re.findall(pattern,string) #this will match all the cases in which the pattern is present
result_4 = re.split(pattern,string) #this function will split the data where "zack" the present #you could also set the pattern as "," to split columns by commas, etc.
result_5 = re.sub(pattern,replace,string) #this will replace the "pattern" with "??"
print(f"result_1: {result}")
print(f"result_2: {result_2}")
print(f"result_2_using_group: {result_2.group()}") #this will group the pattern together and generate one clean answer
print(f"result_3: {result_3}")
print(f"result_4: {result_4}")
print(f"result_5: {result_5}")

#date and time
import datetime as dtm

dt = dtm.datetime.now()
dt_1 = dtm.date.today()
print(dt)
print(dt_1)

dt_2 = dtm.date(2020, 5, 17)
dt_3 = dtm.timedelta(30) #increase any day by 30 days
print(dt_2 + dt_3) #adding 30 days to the dt_2 variable

print(f"Current Year:", dt.year)
print(f"Current Month:", dt.month)
print(f"Current Day:", dt.day)

print(dt.strftime("%A, %B %d, %Y")) #using the dt varilable and rearranging the date to get your desired output

dt_4 = dtm.time(11, 20, 45)
print(dt_4.strftime("%I:%M:%S")) #hours minutes seconds

#Native time support (Zoneinfo)
#pip install tzdata --required package to perform these functions
import zoneinfo
import datetime

now = datetime.datetime.now()

time_zone_1 = zoneinfo.ZoneInfo('Europe/London')
tzeurope = datetime.datetime.now(tz=time_zone_1) #passing the europe time zone into a new variable
print(tzeurope)

time_zone_2 = zoneinfo.ZoneInfo('US/Pacific')
tzUS = datetime.datetime.now(tz=time_zone_2) #passing the USA time zone into a new variable
print(tzUS)

# EXCEPTION HANDLING FOR KNOWN EXCEPTIONS

try:
  print(a)
  # print(4+"hi")
  # open("abc.txt")
  # print(4/0)
  # import fabric
except NameError:  # this will trigger if the code is a Name Error
  print("Variable is not defined")
except TypeError:  # this will trigger if the code is a type Error
  print("Adding number and string is not possible")
except ZeroDivisionError:  # this will trigger if the code is a division by zero error
  print("Division with zero is not possible")
except ModuleNotFoundError:
  print("Please install the proper package to install it")  # this will trigger if the code is a module not found error
except Exception as e:  # this will trigger if the code is an unknown or unmentioned error
  print(e)
finally:
  print("Finally this will execute")  # this will execute regardless if there is an error or not.

#TRY EXCEPT ELSE AND FINALLY USAGE
try:
  a=10
  print(a)
except NameError:
  print("Variable is not defined")
except Exception as e:
  print("Exception occured:",e)
else:
  print("This will execute if there is no exceptions in the try block")
finally:
  print("this will always execute")
