# Polymorphism in OOP
import math
class Shape:
    def calc_area(self):
        pass
#extending the shape class
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def calc_area(self):
        return math.pi *self.radius ** 2

#extending the shape class
class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def calc_area(self):
        return self.width * self.height

shapes = [Circle(5), Rectangle(10,2), Circle(7), Rectangle(25, 15)]

#printing the areas for all of our shapes
for shape in shapes:
    print(shape.calc_area())

#ABSTRACTION IN OOP
from abc import ABC, abstractmethod

class Payment(ABC):
    @abstractmethod
    def process_payment(self):
        pass

class CreditCardPayment(Payment):
    def process_payment(self):
        #code to process credit card payment
        pass
    

class StripePayment(Payment):
    def process_payment(self):
        #code to process stripe payment
        pass


class PayPalPayment(Payment):
    def process_payment(self):
        #code to process PayPal payment
        pass

    
